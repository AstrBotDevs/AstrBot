name: Docker Image CI/CD

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  publish-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Pull The Codes
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Must be 0 so we can fetch tags

      - name: Get latest tag (only on manual trigger)
        id: get-latest-tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          tag=$(git describe --tags --abbrev=0)
          echo "latest_tag=$tag" >> $GITHUB_OUTPUT

      - name: Checkout to latest tag (only on manual trigger)
        if: github.event_name == 'workflow_dispatch'
        run: git checkout ${{ steps.get-latest-tag.outputs.latest_tag }}

      - name: Resolve build version
        id: build-version
        env:
          REF_TYPE: ${{ github.ref_type }}
          REF_NAME: ${{ github.ref_name }}
          EVENT_NAME: ${{ github.event_name }}
          LATEST_TAG: ${{ steps.get-latest-tag.outputs.latest_tag }}
        run: |
          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            version="$LATEST_TAG"
            source_type="tag"
          elif [ "$REF_TYPE" = "tag" ]; then
            version="$REF_NAME"
            source_type="tag"
          elif [ "$REF_TYPE" = "branch" ] && [ "$REF_NAME" = "master" ]; then
            version="test"
            source_type="branch"
          else
            version="$REF_NAME"
            source_type="branch"
          fi
          if [[ "$version" == *"beta"* ]] || [[ "$version" == *"alpha"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "Version $version marked as pre-release"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "Version $version marked as stable"
          fi
          if [ "$source_type" = "tag" ]; then
            echo "push_latest=true" >> $GITHUB_OUTPUT
          else
            echo "push_latest=false" >> $GITHUB_OUTPUT
          fi
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Build Dashboard
        run: |
          cd dashboard
          npm install
          npm run build
          mkdir -p dist/assets
          echo $(git rev-parse HEAD) > dist/assets/version
          cd ..
          mkdir -p data
          cp -r dashboard/dist data/

      - name: Set QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: Soulter
          password: ${{ secrets.GHCR_GITHUB_TOKEN }}

      - name: Build and Push Docker to DockerHub and Github GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.build-version.outputs.push_latest == 'true' && steps.build-version.outputs.is_prerelease == 'false' && format('{0}/astrbot:latest', secrets.DOCKER_HUB_USERNAME) || '' }}
            ${{ steps.build-version.outputs.push_latest == 'true' && steps.build-version.outputs.is_prerelease == 'false' && 'ghcr.io/soulter/astrbot:latest' || '' }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/astrbot:${{ steps.build-version.outputs.version }}
            ghcr.io/soulter/astrbot:${{ steps.build-version.outputs.version }}

      - name: Post build notifications
        run: echo "Docker image has been built and pushed successfully"
